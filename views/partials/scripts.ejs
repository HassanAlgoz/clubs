<!-- Scripts -->
<!--<script src="/js/lib/jquery-2.2.5.min.js"></script>-->
<script src="/js/lib/jquery-3.2.1.min.js"></script>
<!-- Latest compiled and minified JavaScript -->
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
<script src="/js/lib/showdown.min.js"></script>
<script src="/js/lib/moment.js"></script>
<script src="/js/navbar.js"></script>


<!-- Helper Functions -->
<script>

    console.log('scripts.ejs helper functions loaded')

    // // CONSTANTS
    // const PRESIDENT = "president"
    // const MANAGER = "manager"
    // const MEMBER = "member"
    // const UNAPPROVED = "unapproved"
    // const KICKED = "kicked"


    // const user = $('#user').val()
    
    // const userRole = $('#userRole').val()
    // function hasRole() {
    //     return userRole === PRESIDENT ||
    //     userRole === MANAGER ||
    //     userRole === MEMBER ||
    //     userRole === UNAPPROVED
    // }


    moment.locale('en-us');

    const converter = new showdown.Converter();
    converter.setFlavor('github');

    function markdownBind($inputElement, $outputElement) {
        let markdown = $inputElement.val() || $inputElement.text()
        let html = converter.makeHtml(markdown)
        $outputElement.html(html)
        $inputElement.on('keyup', () => {
            let markdown = $inputElement.val() || $inputElement.text()
            let html = converter.makeHtml(markdown)
            $outputElement.html(html)
        })
    }

    function textBind($inputElement, $outputElement) {
        $outputElement.text($inputElement.val() || $inputElement.text())
        $inputElement.on('keyup', () => {
            $outputElement.text($inputElement.val() || $inputElement.text())
        })
    }

    function populateInputFields(dataObject, fieldsArray) {
        for(let i = 0; i < fieldsArray.length; ++i) {
            let fieldName = fieldsArray[i]
            try {
                $('#' + fieldName)
                $('#' + fieldName).val(dataObject[fieldName])
            } catch(e) { console.log(e) }
        }
    }

    function populateText(dataObject, fieldsArray) {
        for(let i = 0; i < fieldsArray.length; ++i) {
            let fieldName = fieldsArray[i]
            $('#' + fieldName).text(dataObject[fieldName])
        }
    }

    function getId(resourceName) {
        let str = location.pathname.substring(location.pathname.indexOf(resourceName) + `${resourceName}/`.length)
        if (str.indexOf('/') !== -1) {
            return str.substring(0, str.indexOf('/'))
        } else {
            return str.replace(/#/gi, '')
        }
        
    }

    // function query(name) {
    //     name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
    //     var regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
    //     var results = regex.exec(location.search);
    //     return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
    // };

</script>